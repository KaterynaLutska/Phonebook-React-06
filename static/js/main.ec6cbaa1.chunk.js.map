{"version":3,"sources":["components/Container/Container.jsx","redux/phonebook/phonebook-types.js","redux/phonebook/phonebook-reducer.js","redux/store.js","redux/phonebook/phonebook-actions.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","components/Phonebook/Phonebook.jsx","App.js","index.js"],"names":["Container","children","className","combineReducers","items","state","type","payload","types","filter","el","id","rootReducer","contacts","phonebookReducer","store","createStore","composeWithDevTools","addContact","name","number","massage","uuidv4","message","contactId","value","ContactForm","handleChange","e","currentTarget","setState","handleSubmit","preventDefault","newContact","props","onSubmit","reset","this","htmlFor","nameInputId","title","placeholder","onChange","required","Component","connect","dispatch","data","actions","Filter","changeFilter","target","protoType","PropTypes","string","func","getVisibleContacts","allContacts","normalize","toLowerCase","includes","onDelete","map","onClick","Phonebook","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ec6cbaa1.chunk.js","sourcesContent":["import './Container.css';\n\nconst Container = ({ children }) => {\n  return <div className=\"Container\">{children}</div>;\n};\n\nexport default Container;\n","export default {\n  ADD: 'phonebook/ADD',\n  DELETE: 'phonebook/DELETE',\n  FILTER: 'phonebook/FILTER',\n};\n","import { combineReducers } from 'redux';\nimport types from './phonebook-types';\n\nconst items = (state = [], { type, payload }) => {\n  switch (type) {\n    case types.ADD:\n      return [...state, payload];\n    //return [...state, playload.filter(el => el.id !== playload)];\n\n    case types.DELETE:\n      return state.filter(el => el.id !== payload);\n\n    default:\n      return state;\n  }\n};\n\nconst filter = (state = '', { type, payload }) => {\n  switch (type) {\n    case types.FILTER:\n      return payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","import { createStore, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport phonebookReducer from './phonebook/phonebook-reducer';\n\nconst rootReducer = combineReducers({\n  contacts: phonebookReducer,\n});\n\nconst store = createStore(rootReducer, composeWithDevTools());\n\nexport default store;\n","import types from './phonebook-types';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const addContact = ({ name, number, massage }) => ({\n  type: types.ADD,\n  payload: {\n    id: uuidv4(),\n    name: name,\n    number: number,\n    message: massage,\n  },\n});\n\nexport const deleteContacts = contactId => ({\n  type: types.DELETE,\n  payload: contactId,\n});\n\nexport const changeFilter = value => ({\n  type: types.FILTER,\n  payload: value,\n});\n\nexport default { addContact, deleteContacts, changeFilter };\n","import { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { connect } from 'react-redux';\nimport store from '../../redux/store';\nimport * as actions from '../../redux/phonebook/phonebook-actions';\n\nimport Input from '../Input';\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n    message: '',\n  };\n\n  handleChange = e => {\n    const { name, value } = e.currentTarget;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const { name, number, message } = this.state;\n    const id = uuidv4();\n\n    const newContact = { id: id, name: name, number: number, message: message };\n\n    this.props.onSubmit(newContact);\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '', message: '' });\n  };\n\n  render() {\n    const { name, number, message } = this.state;\n    return (\n      <div className=\"phonebook\">\n        <form onSubmit={this.handleSubmit} className=\"phonebook-form\">\n          <div className=\"phonebook-input-fielsds\">\n            <label htmlFor={this.nameInputId} className=\"phonebook-label\">\n              {/* <Input type={name} handleChange={this.handleChange} />\n              <Input type={number} handleChange={this.handleChange} /> */}\n\n              <input\n                className=\"phonebook-input\"\n                type=\"text\"\n                name=\"name\"\n                //pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                value={name}\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                placeholder=\"name\"\n                onChange={this.handleChange}\n                required\n              />\n            </label>\n            <label className=\"phonebook-label\">\n              <input\n                className=\"phonebook-input\"\n                type=\"tel\"\n                name=\"number\"\n                value={number}\n                //pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\n                placeholder=\"number\"\n                title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\n                onChange={this.handleChange}\n                required\n              />\n            </label>\n          </div>\n          <div className=\"msg\">\n            <textarea\n              placeholder=\"more information\"\n              className=\"textarea\"\n              name=\"message\"\n              value={message}\n              onChange={this.handleChange}\n            ></textarea>\n            <button type=\"submit\" className=\"btn\">\n              Add contact\n            </button>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\n// export default ContactForm;\n\n// const mapStateToProps = state => {\n//   return {\n//     value: state.contacts,\n//   };\n// };\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: data => dispatch(actions.addContact(data)),\n});\n\nexport default connect(null, mapDispatchToProps)(ContactForm);\n\n// ContactForm.propTypes = {\n//   name: PropTypes.string,\n//   number: PropTypes.number,\n//   message: PropTypes.string,\n//   onSubmit: PropTypes.func,\n// };\n","import PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport actions from '../../redux/phonebook/phonebook-actions';\n\nconst Filter = ({ filter, changeFilter }) => {\n  return (\n    <div className=\"filter\">\n      <label>\n        <input\n          className=\"filter-input\"\n          type=\"text\"\n          value={filter}\n          placeholder=\"find contacts by name...\"\n          onChange={changeFilter}\n        />\n      </label>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  filter: state.contacts.filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  changeFilter: e => dispatch(actions.changeFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n\nFilter.protoType = {\n  filter: PropTypes.string,\n  changeFilter: PropTypes.func,\n};\n","import PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport actions from '../../redux/phonebook/phonebook-actions';\n\nconst ContactList = ({ contacts, onDelete }) => {\n  return (\n    <>\n      <ul className=\"contact-list\">\n        {contacts.map(el => (\n          <li key={el.id} className=\"contact-item\">\n            {el.name + ':'}\n            <span className=\"contact-span\">{el.number}</span>\n            <p className=\"contact-message\">{el.message}</p>\n            <button onClick={() => onDelete(el.id)} className=\"btn\">\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n\nconst getVisibleContacts = (allContacts, filter) => {\n  const normalize = filter.toLowerCase();\n\n  return allContacts.filter(el => el.name.toLowerCase().includes(normalize));\n};\n\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\n  contacts: getVisibleContacts(items, filter),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDelete: id => dispatch(actions.deleteContacts(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.shape),\n  onDelete: PropTypes.func,\n};\n","import { Component } from 'react';\n\nimport { connect } from 'react-redux';\n\nimport store from '../../redux/store';\nimport * as actions from '../../redux/phonebook/phonebook-actions';\n\nimport ContactForm from '../ContactForm';\nimport Filter from '../Filter';\nimport ContactList from '../ContactList';\n\nfunction Phonebook() {\n  //   state = {\n  //     contacts: [],\n  //     filter: '',\n  //   };\n\n  //   componentDidMount() {\n  //   const contacts = localStorage.getItem('contacts');\n  //   const parsedContacts = JSON.parse(contacts);\n  //   if (parsedContacts) {\n  //     this.setState({ contacts: parsedContacts });\n  //   }\n  //   }\n\n  // componentDidUpdate(prevProps, prevState) {\n  // if (this.state.contacts !== prevState.contacts) {\n  //   localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n  // }\n  // }\n\n  //render() {\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      {/* {items.length > 0 && ( */}\n      <>\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactList />\n      </>\n      {/* )} */}\n    </>\n  );\n}\nexport default Phonebook;\n","import './App.css';\nimport { Component } from 'react';\n\nimport Container from './components/Container/Container';\nimport Phonebook from './components/Phonebook';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Container>\n          <Phonebook />\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}